"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bodyParser = require("body-parser");
const cors = require("cors");
const express = require("express");
const session = require("express-session");
const app = express();
if (!process.env.PORT || !process.env.SECRET_SESSION) {
    process.stdout.write(JSON.stringify(process.env));
    throw new Error("please verify you .env or .env-sample file");
}
const PORT = process.env.PORT;
const index_1 = require("./routes/index");
app.use(cors());
app.use(session({
    resave: true,
    saveUninitialized: true,
    secret: process.env.SECRET_SESSION
}));
const header = (_, res, next) => {
    res.header("Access-Control-Allow-Origin", "*");
    res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    next();
};
const listen = () => {
    process.stdout.write(`Listening on port ${PORT}!\n`);
};
app.use(header);
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());
app.use(index_1.default);
app.listen(PORT, listen);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL0FwcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLDBDQUEyQztBQUMzQyw2QkFBOEI7QUFDOUIsbUNBQW9DO0FBQ3BDLDJDQUE0QztBQUc1QyxNQUFNLEdBQUcsR0FBd0IsT0FBTyxFQUFFLENBQUM7QUFJM0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUU7SUFDcEQsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNsRCxNQUFNLElBQUksS0FBSyxDQUFDLDRDQUE0QyxDQUFDLENBQUM7Q0FDL0Q7QUFHRCxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQztBQUc5QiwwQ0FBb0M7QUFHcEMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBR2hCLEdBQUcsQ0FBQyxHQUFHLENBQ0wsT0FBTyxDQUFDO0lBQ04sTUFBTSxFQUFFLElBQUk7SUFDWixpQkFBaUIsRUFBRSxJQUFJO0lBQ3ZCLE1BQU0sRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWM7Q0FDbkMsQ0FBQyxDQUNILENBQUM7QUFLRixNQUFNLE1BQU0sR0FBRyxDQUNiLENBQWtCLEVBQ2xCLEdBQXFCLEVBQ3JCLElBQTBCLEVBQzFCLEVBQUU7SUFDRixHQUFHLENBQUMsTUFBTSxDQUFDLDZCQUE2QixFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQy9DLEdBQUcsQ0FBQyxNQUFNLENBQ1IsOEJBQThCLEVBQzlCLGdEQUFnRCxDQUNqRCxDQUFDO0lBQ0YsSUFBSSxFQUFFLENBQUM7QUFDVCxDQUFDLENBQUM7QUFFRixNQUFNLE1BQU0sR0FBRyxHQUFHLEVBQUU7SUFDbEIsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMscUJBQXFCLElBQUksS0FBSyxDQUFDLENBQUM7QUFDdkQsQ0FBQyxDQUFDO0FBR0YsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUdoQixHQUFHLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBR3BELEdBQUcsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7QUFHM0IsR0FBRyxDQUFDLEdBQUcsQ0FBQyxlQUFNLENBQUMsQ0FBQztBQUVoQixHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGxpYi9hcHAudHNcbmltcG9ydCBib2R5UGFyc2VyID0gcmVxdWlyZShcImJvZHktcGFyc2VyXCIpO1xuaW1wb3J0IGNvcnMgPSByZXF1aXJlKFwiY29yc1wiKTtcbmltcG9ydCBleHByZXNzID0gcmVxdWlyZShcImV4cHJlc3NcIik7XG5pbXBvcnQgc2Vzc2lvbiA9IHJlcXVpcmUoXCJleHByZXNzLXNlc3Npb25cIik7XG5cbi8vIENyZWF0ZSBhIG5ldyBleHByZXNzIGFwcGxpY2F0aW9uIGluc3RhbmNlXG5jb25zdCBhcHA6IGV4cHJlc3MuQXBwbGljYXRpb24gPSBleHByZXNzKCk7XG5cbi8vIFByb2Nlc3MgLmVudiBpcyBkZWZpbmVkID9cblxuaWYgKCFwcm9jZXNzLmVudi5QT1JUIHx8ICFwcm9jZXNzLmVudi5TRUNSRVRfU0VTU0lPTikge1xuICBwcm9jZXNzLnN0ZG91dC53cml0ZShKU09OLnN0cmluZ2lmeShwcm9jZXNzLmVudikpO1xuICB0aHJvdyBuZXcgRXJyb3IoXCJwbGVhc2UgdmVyaWZ5IHlvdSAuZW52IG9yIC5lbnYtc2FtcGxlIGZpbGVcIik7XG59XG5cbi8vIENvbnN0YW50c1xuY29uc3QgUE9SVCA9IHByb2Nlc3MuZW52LlBPUlQ7XG5cbi8vIE15IGNvbnRyb2xsZXJcbmltcG9ydCByb3V0ZXMgZnJvbSBcIi4vcm91dGVzL2luZGV4XCI7XG5cbi8vIEltcGxlbWVudCBDT1JTXG5hcHAudXNlKGNvcnMoKSk7XG5cbi8vIFNlc3Npb25cbmFwcC51c2UoXG4gIHNlc3Npb24oe1xuICAgIHJlc2F2ZTogdHJ1ZSxcbiAgICBzYXZlVW5pbml0aWFsaXplZDogdHJ1ZSxcbiAgICBzZWNyZXQ6IHByb2Nlc3MuZW52LlNFQ1JFVF9TRVNTSU9OXG4gIH0pXG4pO1xuXG4vLyBGdW5jdGlvblxuXG4vLyBDb3JzIGNvbmZpZ1xuY29uc3QgaGVhZGVyID0gKFxuICBfOiBleHByZXNzLlJlcXVlc3QsXG4gIHJlczogZXhwcmVzcy5SZXNwb25zZSxcbiAgbmV4dDogZXhwcmVzcy5OZXh0RnVuY3Rpb25cbikgPT4ge1xuICByZXMuaGVhZGVyKFwiQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luXCIsIFwiKlwiKTtcbiAgcmVzLmhlYWRlcihcbiAgICBcIkFjY2Vzcy1Db250cm9sLUFsbG93LUhlYWRlcnNcIixcbiAgICBcIk9yaWdpbiwgWC1SZXF1ZXN0ZWQtV2l0aCwgQ29udGVudC1UeXBlLCBBY2NlcHRcIlxuICApO1xuICBuZXh0KCk7XG59O1xuXG5jb25zdCBsaXN0ZW4gPSAoKSA9PiB7XG4gIHByb2Nlc3Muc3Rkb3V0LndyaXRlKGBMaXN0ZW5pbmcgb24gcG9ydCAke1BPUlR9IVxcbmApO1xufTtcblxuLy8gU0VUIEhFQURFUlxuYXBwLnVzZShoZWFkZXIpO1xuXG4vLyBwYXJzZSBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcbmFwcC51c2UoYm9keVBhcnNlci51cmxlbmNvZGVkKHsgZXh0ZW5kZWQ6IGZhbHNlIH0pKTtcblxuLy8gcGFyc2UgYXBwbGljYXRpb24vanNvblxuYXBwLnVzZShib2R5UGFyc2VyLmpzb24oKSk7XG5cbi8vIFBhdGggY29ubmVjdGlvblxuYXBwLnVzZShyb3V0ZXMpO1xuXG5hcHAubGlzdGVuKFBPUlQsIGxpc3Rlbik7XG4iXX0=