"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bodyParser = require("body-parser");
const cors = require("cors");
const express = require("express");
const session = require("express-session");
const app = express();
const PORT = process.env.PORT || 8082;
const index_1 = require("./routes/index");
app.use(cors());
app.use(session({
    secret: process.env._SECRET_SESSION || "Node kafka by Maissacrement",
    resave: true,
    saveUninitialized: true
}));
const header = (_, res, next) => {
    res.header("Access-Control-Allow-Origin", "*");
    res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    next();
};
const listen = () => {
    process.stdout.write(`Listening on port ${PORT}!\n`);
};
app.use(header);
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());
app.use(index_1.default);
app.listen(PORT, listen);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL0FwcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLDBDQUEyQztBQUMzQyw2QkFBOEI7QUFDOUIsbUNBQW9DO0FBQ3BDLDJDQUE0QztBQUc1QyxNQUFNLEdBQUcsR0FBd0IsT0FBTyxFQUFFLENBQUM7QUFHM0MsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDO0FBR3RDLDBDQUFvQztBQUdwQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7QUFHaEIsR0FBRyxDQUFDLEdBQUcsQ0FDTCxPQUFPLENBQUM7SUFDTixNQUFNLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLElBQUksNkJBQTZCO0lBQ3BFLE1BQU0sRUFBRSxJQUFJO0lBQ1osaUJBQWlCLEVBQUUsSUFBSTtDQUN4QixDQUFDLENBQ0gsQ0FBQztBQUtGLE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBTSxFQUFFLEdBQVEsRUFBRSxJQUFTLEVBQUUsRUFBRTtJQUM3QyxHQUFHLENBQUMsTUFBTSxDQUFDLDZCQUE2QixFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQy9DLEdBQUcsQ0FBQyxNQUFNLENBQ1IsOEJBQThCLEVBQzlCLGdEQUFnRCxDQUNqRCxDQUFDO0lBQ0YsSUFBSSxFQUFFLENBQUM7QUFDVCxDQUFDLENBQUM7QUFFRixNQUFNLE1BQU0sR0FBRyxHQUFHLEVBQUU7SUFDbEIsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMscUJBQXFCLElBQUksS0FBSyxDQUFDLENBQUM7QUFDdkQsQ0FBQyxDQUFDO0FBR0YsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUdoQixHQUFHLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBR3BELEdBQUcsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7QUFHM0IsR0FBRyxDQUFDLEdBQUcsQ0FBQyxlQUFNLENBQUMsQ0FBQztBQUVoQixHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGxpYi9hcHAudHNcbmltcG9ydCBib2R5UGFyc2VyID0gcmVxdWlyZShcImJvZHktcGFyc2VyXCIpO1xuaW1wb3J0IGNvcnMgPSByZXF1aXJlKFwiY29yc1wiKTtcbmltcG9ydCBleHByZXNzID0gcmVxdWlyZShcImV4cHJlc3NcIik7XG5pbXBvcnQgc2Vzc2lvbiA9IHJlcXVpcmUoXCJleHByZXNzLXNlc3Npb25cIik7XG5cbi8vIENyZWF0ZSBhIG5ldyBleHByZXNzIGFwcGxpY2F0aW9uIGluc3RhbmNlXG5jb25zdCBhcHA6IGV4cHJlc3MuQXBwbGljYXRpb24gPSBleHByZXNzKCk7XG5cbi8vIENvbnN0YW50c1xuY29uc3QgUE9SVCA9IHByb2Nlc3MuZW52LlBPUlQgfHwgODA4MjtcblxuLy8gTXkgY29udHJvbGxlclxuaW1wb3J0IHJvdXRlcyBmcm9tIFwiLi9yb3V0ZXMvaW5kZXhcIjtcblxuLy8gSW1wbGVtZW50IENPUlNcbmFwcC51c2UoY29ycygpKTtcblxuLy8gU2Vzc2lvblxuYXBwLnVzZShcbiAgc2Vzc2lvbih7XG4gICAgc2VjcmV0OiBwcm9jZXNzLmVudi5fU0VDUkVUX1NFU1NJT04gfHwgXCJOb2RlIGthZmthIGJ5IE1haXNzYWNyZW1lbnRcIixcbiAgICByZXNhdmU6IHRydWUsXG4gICAgc2F2ZVVuaW5pdGlhbGl6ZWQ6IHRydWVcbiAgfSlcbik7XG5cbi8vIEZ1bmN0aW9uXG5cbi8vIENvcnMgY29uZmlnXG5jb25zdCBoZWFkZXIgPSAoXzogYW55LCByZXM6IGFueSwgbmV4dDogYW55KSA9PiB7XG4gIHJlcy5oZWFkZXIoXCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW5cIiwgXCIqXCIpO1xuICByZXMuaGVhZGVyKFxuICAgIFwiQWNjZXNzLUNvbnRyb2wtQWxsb3ctSGVhZGVyc1wiLFxuICAgIFwiT3JpZ2luLCBYLVJlcXVlc3RlZC1XaXRoLCBDb250ZW50LVR5cGUsIEFjY2VwdFwiXG4gICk7XG4gIG5leHQoKTtcbn07XG5cbmNvbnN0IGxpc3RlbiA9ICgpID0+IHtcbiAgcHJvY2Vzcy5zdGRvdXQud3JpdGUoYExpc3RlbmluZyBvbiBwb3J0ICR7UE9SVH0hXFxuYCk7XG59O1xuXG4vLyBTRVQgSEVBREVSXG5hcHAudXNlKGhlYWRlcik7XG5cbi8vIHBhcnNlIGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFxuYXBwLnVzZShib2R5UGFyc2VyLnVybGVuY29kZWQoeyBleHRlbmRlZDogZmFsc2UgfSkpO1xuXG4vLyBwYXJzZSBhcHBsaWNhdGlvbi9qc29uXG5hcHAudXNlKGJvZHlQYXJzZXIuanNvbigpKTtcblxuLy8gUGF0aCBjb25uZWN0aW9uXG5hcHAudXNlKHJvdXRlcyk7XG5cbmFwcC5saXN0ZW4oUE9SVCwgbGlzdGVuKTtcbiJdfQ==