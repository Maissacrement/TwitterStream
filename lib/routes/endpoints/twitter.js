"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Twitter = require("twitter");
const client = new Twitter({
    access_token_key: `${process.env.TOKEN_KEY}`,
    access_token_secret: `${process.env.TOKEN_SECRET}`,
    consumer_key: `${process.env.CONSUMER_KEY}`,
    consumer_secret: `${process.env.CONSUMER_SECRET}`
});
const params = { track: "rihanna" };
const path = "statuses/filter";
const stream = client.stream(path, params);
const parseChunkToObject = (data) => {
    const element = typeof data === "object" ? data : {};
    return element;
};
const onReceiveData = (event) => {
    const chunck = parseChunkToObject(event);
    const tweetIsDefine = Object.prototype.hasOwnProperty.call(event, "user");
    if (tweetIsDefine) {
        process.stdout.write(JSON.stringify({
            text: chunck.text,
            username: chunck.user.name
        }, null, " "));
    }
};
const onError = (error) => {
    throw error;
};
stream.on("data", onReceiveData);
stream.on("error", onError);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHdpdHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvZW5kcG9pbnRzL3R3aXR0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxtQ0FBb0M7QUFFcEMsTUFBTSxNQUFNLEdBQVksSUFBSSxPQUFPLENBQUM7SUFDbEMsZ0JBQWdCLEVBQUUsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRTtJQUM1QyxtQkFBbUIsRUFBRSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFO0lBQ2xELFlBQVksRUFBRSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFO0lBQzNDLGVBQWUsRUFBRSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFO0NBQ2xELENBQUMsQ0FBQztBQUdILE1BQU0sTUFBTSxHQUFXLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxDQUFDO0FBQzVDLE1BQU0sSUFBSSxHQUFXLGlCQUFpQixDQUFDO0FBR3ZDLE1BQU0sTUFBTSxHQUFpQixNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztBQUd6RCxNQUFNLGtCQUFrQixHQUFRLENBQUMsSUFBUyxFQUFFLEVBQUU7SUFDNUMsTUFBTSxPQUFPLEdBQVcsT0FBTyxJQUFJLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUU3RCxPQUFPLE9BQU8sQ0FBQztBQUNqQixDQUFDLENBQUM7QUFHRixNQUFNLGFBQWEsR0FBUSxDQUFDLEtBQTJCLEVBQUUsRUFBRTtJQUV6RCxNQUFNLE1BQU0sR0FBUSxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM5QyxNQUFNLGFBQWEsR0FBWSxNQUFNLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQ2pFLEtBQUssRUFDTCxNQUFNLENBQ1AsQ0FBQztJQUVGLElBQUksYUFBYSxFQUFFO1FBRWpCLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUNsQixJQUFJLENBQUMsU0FBUyxDQUNaO1lBQ0UsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJO1lBQ2pCLFFBQVEsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUk7U0FDM0IsRUFDRCxJQUFJLEVBQ0osR0FBRyxDQUNKLENBQ0YsQ0FBQztLQUNIO0FBQ0gsQ0FBQyxDQUFDO0FBR0YsTUFBTSxPQUFPLEdBQVEsQ0FBQyxLQUFVLEVBQUUsRUFBRTtJQUNsQyxNQUFNLEtBQUssQ0FBQztBQUNkLENBQUMsQ0FBQztBQUtGLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0FBR2pDLE1BQU0sQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSBcInN0cmVhbVwiO1xuaW1wb3J0IFR3aXR0ZXIgPSByZXF1aXJlKFwidHdpdHRlclwiKTtcblxuY29uc3QgY2xpZW50OiBUd2l0dGVyID0gbmV3IFR3aXR0ZXIoe1xuICBhY2Nlc3NfdG9rZW5fa2V5OiBgJHtwcm9jZXNzLmVudi5UT0tFTl9LRVl9YCxcbiAgYWNjZXNzX3Rva2VuX3NlY3JldDogYCR7cHJvY2Vzcy5lbnYuVE9LRU5fU0VDUkVUfWAsXG4gIGNvbnN1bWVyX2tleTogYCR7cHJvY2Vzcy5lbnYuQ09OU1VNRVJfS0VZfWAsXG4gIGNvbnN1bWVyX3NlY3JldDogYCR7cHJvY2Vzcy5lbnYuQ09OU1VNRVJfU0VDUkVUfWBcbn0pO1xuXG4vLyBUd2VldGVyIEFyZ3NcbmNvbnN0IHBhcmFtczogb2JqZWN0ID0geyB0cmFjazogXCJyaWhhbm5hXCIgfTtcbmNvbnN0IHBhdGg6IHN0cmluZyA9IFwic3RhdHVzZXMvZmlsdGVyXCI7XG5cbi8vIERlZmluZSBTdHJlYW1cbmNvbnN0IHN0cmVhbTogRXZlbnRFbWl0dGVyID0gY2xpZW50LnN0cmVhbShwYXRoLCBwYXJhbXMpO1xuXG4vLyBGb3IgYSBkYXRhIHJldHVybiBhbiBvYmplY3RcbmNvbnN0IHBhcnNlQ2h1bmtUb09iamVjdDogYW55ID0gKGRhdGE6IGFueSkgPT4ge1xuICBjb25zdCBlbGVtZW50OiBvYmplY3QgPSB0eXBlb2YgZGF0YSA9PT0gXCJvYmplY3RcIiA/IGRhdGEgOiB7fTtcblxuICByZXR1cm4gZWxlbWVudDtcbn07XG5cbi8vIFByb2Nlc3Mgc3RyZWFtIG9uIHN1Y2Nlc3NcbmNvbnN0IG9uUmVjZWl2ZURhdGE6IGFueSA9IChldmVudDogVHdpdHRlci5SZXNwb25zZURhdGEpID0+IHtcbiAgLy8gR2V0IGZvciBlYWNoIGNodW5jayBhIGRhdGEgb2JqZWN0IC0tPiByZXNvbHZlIGNodW5jayA9PSAndW5kZWZpbmVkJ1xuICBjb25zdCBjaHVuY2s6IGFueSA9IHBhcnNlQ2h1bmtUb09iamVjdChldmVudCk7XG4gIGNvbnN0IHR3ZWV0SXNEZWZpbmU6IGJvb2xlYW4gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoXG4gICAgZXZlbnQsXG4gICAgXCJ1c2VyXCJcbiAgKTtcblxuICBpZiAodHdlZXRJc0RlZmluZSkge1xuICAgIC8vIEhlcmUgaSBjYW4gd29yayBvbiBteSBvYmplY3RcbiAgICBwcm9jZXNzLnN0ZG91dC53cml0ZShcbiAgICAgIEpTT04uc3RyaW5naWZ5KFxuICAgICAgICB7XG4gICAgICAgICAgdGV4dDogY2h1bmNrLnRleHQsXG4gICAgICAgICAgdXNlcm5hbWU6IGNodW5jay51c2VyLm5hbWVcbiAgICAgICAgfSxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgXCIgXCJcbiAgICAgIClcbiAgICApO1xuICB9XG59O1xuXG4vLyBQcm9jY2VzcyBzdHJlYW0gb24gZXJyb3JcbmNvbnN0IG9uRXJyb3I6IGFueSA9IChlcnJvcjogYW55KSA9PiB7XG4gIHRocm93IGVycm9yO1xufTtcblxuLy8gTWFuYWdlIHN0cmVhbVxuXG4vLyBPbiBzdWNjZXNzXG5zdHJlYW0ub24oXCJkYXRhXCIsIG9uUmVjZWl2ZURhdGEpO1xuXG4vLyBPbiBlcnJvclxuc3RyZWFtLm9uKFwiZXJyb3JcIiwgb25FcnJvcik7XG4iXX0=