"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const kafka = require("kafka-node");
const KeyedMessage = kafka.KeyedMessage;
const Producer = kafka.Producer;
const client = new kafka.KafkaClient({
    kafkaHost: "127.0.0.1:9092"
});
const producer = new Producer(client);
const km = new KeyedMessage("key", "message");
const payloads = [
    { topic: "hello-world", messages: "hi", partition: 0 },
    { topic: "hello-world", messages: ["hello", "world", km] }
];
const successfull = (res) => {
    return res.status(200).json({
        message: "Message broker successfully send",
        status: 200
    });
};
const sendTopic = (_, res) => {
    producer.send(payloads, (err, data) => {
        if (err) {
            throw new Error(err);
        }
        process.stdout.write("\nSend topic logs by Producer:\n");
        process.stdout.write(JSON.stringify(data, null, " ") + "\n");
        successfull(res);
    });
};
exports.sendTopic = sendTopic;
const topicsToCreate = [
    {
        messages: "hi",
        partitions: 3,
        replicationFactor: 1,
        topic: "sql"
    },
    {
        messages: "hi",
        partitions: 3,
        replicationFactor: 1,
        topic: "system"
    }
];
const createANewTopic = (_, res) => {
    client.createTopics(topicsToCreate, (err, result) => {
        if (err) {
            console.error(err);
            throw new Error(err);
        }
        process.stdout.write("\nTopic creation logs by Producer:\n");
        process.stdout.write(JSON.stringify(result, null, " ") + "\n");
        successfull(res);
    });
};
exports.createANewTopic = createANewTopic;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJvZHVjZXJ2Mi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvZW5kcG9pbnRzL1Byb2R1Y2VydjIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxvQ0FBcUM7QUFDckMsTUFBTSxZQUFZLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQztBQUN4QyxNQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDO0FBQ2hDLE1BQU0sTUFBTSxHQUFHLElBQUksS0FBSyxDQUFDLFdBQVcsQ0FBQztJQUNuQyxTQUFTLEVBQUUsZ0JBQWdCO0NBQzVCLENBQUMsQ0FBQztBQUNILE1BQU0sUUFBUSxHQUFHLElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3RDLE1BQU0sRUFBRSxHQUFHLElBQUksWUFBWSxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQztBQUM5QyxNQUFNLFFBQVEsR0FBRztJQUNmLEVBQUUsS0FBSyxFQUFFLGFBQWEsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxDQUFDLEVBQUU7SUFDdEQsRUFBRSxLQUFLLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUFDLEVBQUU7Q0FDM0QsQ0FBQztBQUdGLE1BQU0sV0FBVyxHQUFHLENBQUMsR0FBUSxFQUFFLEVBQUU7SUFDL0IsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUMxQixPQUFPLEVBQUUsa0NBQWtDO1FBQzNDLE1BQU0sRUFBRSxHQUFHO0tBQ1osQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDO0FBR0YsTUFBTSxTQUFTLEdBQUcsQ0FBQyxDQUFNLEVBQUUsR0FBUSxFQUFFLEVBQUU7SUFDckMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFRLEVBQUUsSUFBUyxFQUFFLEVBQUU7UUFDOUMsSUFBSSxHQUFHLEVBQUU7WUFDUCxNQUFNLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3RCO1FBRUQsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsa0NBQWtDLENBQUMsQ0FBQztRQUN6RCxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDN0QsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ25CLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDO0FBZ0NPLDhCQUFTO0FBN0JsQixNQUFNLGNBQWMsR0FBUTtJQUMxQjtRQUNFLFFBQVEsRUFBRSxJQUFJO1FBQ2QsVUFBVSxFQUFFLENBQUM7UUFDYixpQkFBaUIsRUFBRSxDQUFDO1FBQ3BCLEtBQUssRUFBRSxLQUFLO0tBQ2I7SUFDRDtRQUNFLFFBQVEsRUFBRSxJQUFJO1FBQ2QsVUFBVSxFQUFFLENBQUM7UUFDYixpQkFBaUIsRUFBRSxDQUFDO1FBQ3BCLEtBQUssRUFBRSxRQUFRO0tBQ2hCO0NBQ0YsQ0FBQztBQUVGLE1BQU0sZUFBZSxHQUFHLENBQUMsQ0FBTSxFQUFFLEdBQVEsRUFBRSxFQUFFO0lBQzNDLE1BQU0sQ0FBQyxZQUFZLENBQUMsY0FBYyxFQUFFLENBQUMsR0FBUSxFQUFFLE1BQVcsRUFBRSxFQUFFO1FBRTVELElBQUksR0FBRyxFQUFFO1lBQ1AsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNuQixNQUFNLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3RCO1FBRUQsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUM3RCxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDL0QsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ25CLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDO0FBRWtCLDBDQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGthZmthID0gcmVxdWlyZShcImthZmthLW5vZGVcIik7XG5jb25zdCBLZXllZE1lc3NhZ2UgPSBrYWZrYS5LZXllZE1lc3NhZ2U7XG5jb25zdCBQcm9kdWNlciA9IGthZmthLlByb2R1Y2VyO1xuY29uc3QgY2xpZW50ID0gbmV3IGthZmthLkthZmthQ2xpZW50KHtcbiAga2Fma2FIb3N0OiBcIjEyNy4wLjAuMTo5MDkyXCJcbn0pO1xuY29uc3QgcHJvZHVjZXIgPSBuZXcgUHJvZHVjZXIoY2xpZW50KTtcbmNvbnN0IGttID0gbmV3IEtleWVkTWVzc2FnZShcImtleVwiLCBcIm1lc3NhZ2VcIik7XG5jb25zdCBwYXlsb2FkcyA9IFtcbiAgeyB0b3BpYzogXCJoZWxsby13b3JsZFwiLCBtZXNzYWdlczogXCJoaVwiLCBwYXJ0aXRpb246IDAgfSxcbiAgeyB0b3BpYzogXCJoZWxsby13b3JsZFwiLCBtZXNzYWdlczogW1wiaGVsbG9cIiwgXCJ3b3JsZFwiLCBrbV0gfVxuXTtcblxuLy8gU2VuZCBzdWNjZXNzZnVsbFxuY29uc3Qgc3VjY2Vzc2Z1bGwgPSAocmVzOiBhbnkpID0+IHtcbiAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKHtcbiAgICBtZXNzYWdlOiBcIk1lc3NhZ2UgYnJva2VyIHN1Y2Nlc3NmdWxseSBzZW5kXCIsXG4gICAgc3RhdHVzOiAyMDBcbiAgfSk7XG59O1xuXG4vLyBTZW5kIGEgVG9waWNcbmNvbnN0IHNlbmRUb3BpYyA9IChfOiBhbnksIHJlczogYW55KSA9PiB7XG4gIHByb2R1Y2VyLnNlbmQocGF5bG9hZHMsIChlcnI6IGFueSwgZGF0YTogYW55KSA9PiB7XG4gICAgaWYgKGVycikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGVycik7XG4gICAgfVxuXG4gICAgcHJvY2Vzcy5zdGRvdXQud3JpdGUoXCJcXG5TZW5kIHRvcGljIGxvZ3MgYnkgUHJvZHVjZXI6XFxuXCIpO1xuICAgIHByb2Nlc3Muc3Rkb3V0LndyaXRlKEpTT04uc3RyaW5naWZ5KGRhdGEsIG51bGwsIFwiIFwiKSArIFwiXFxuXCIpO1xuICAgIHN1Y2Nlc3NmdWxsKHJlcyk7XG4gIH0pO1xufTtcblxuLy8gVGVzdCBjcmVhdGUgbWFudWFsbHkgdG9waWNcbmNvbnN0IHRvcGljc1RvQ3JlYXRlOiBhbnkgPSBbXG4gIHtcbiAgICBtZXNzYWdlczogXCJoaVwiLFxuICAgIHBhcnRpdGlvbnM6IDMsXG4gICAgcmVwbGljYXRpb25GYWN0b3I6IDEsXG4gICAgdG9waWM6IFwic3FsXCJcbiAgfSxcbiAge1xuICAgIG1lc3NhZ2VzOiBcImhpXCIsXG4gICAgcGFydGl0aW9uczogMyxcbiAgICByZXBsaWNhdGlvbkZhY3RvcjogMSxcbiAgICB0b3BpYzogXCJzeXN0ZW1cIlxuICB9XG5dO1xuXG5jb25zdCBjcmVhdGVBTmV3VG9waWMgPSAoXzogYW55LCByZXM6IGFueSkgPT4ge1xuICBjbGllbnQuY3JlYXRlVG9waWNzKHRvcGljc1RvQ3JlYXRlLCAoZXJyOiBhbnksIHJlc3VsdDogYW55KSA9PiB7XG4gICAgLy8gcmVzdWx0IGlzIGFuIGFycmF5IG9mIGFueSBlcnJvcnMgaWYgYSBnaXZlbiB0b3BpYyBjb3VsZCBub3QgYmUgY3JlYXRlZFxuICAgIGlmIChlcnIpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihlcnIpO1xuICAgIH1cblxuICAgIHByb2Nlc3Muc3Rkb3V0LndyaXRlKFwiXFxuVG9waWMgY3JlYXRpb24gbG9ncyBieSBQcm9kdWNlcjpcXG5cIik7XG4gICAgcHJvY2Vzcy5zdGRvdXQud3JpdGUoSlNPTi5zdHJpbmdpZnkocmVzdWx0LCBudWxsLCBcIiBcIikgKyBcIlxcblwiKTtcbiAgICBzdWNjZXNzZnVsbChyZXMpO1xuICB9KTtcbn07XG5cbmV4cG9ydCB7IHNlbmRUb3BpYywgY3JlYXRlQU5ld1RvcGljIH07XG4iXX0=