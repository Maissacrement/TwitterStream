"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTweet = void 0;
const Twitter = require("twitter");
const client = new Twitter({
    access_token_key: `${process.env.TOKEN_KEY}`,
    access_token_secret: `${process.env.TOKEN_SECRET}`,
    consumer_key: `${process.env.CONSUMER_KEY}`,
    consumer_secret: `${process.env.CONSUMER_SECRET}`
});
const path = "statuses/filter";
const stream = (params) => client.stream(path, params);
const parseChunkToObject = (data) => {
    const element = typeof data === "object" ? data : {};
    return element;
};
const getTweet = (req, res) => {
    const searchBroker = stream({ track: req.query.search });
    searchBroker.on("data", (event) => {
        const chunck = parseChunkToObject(event);
        const tweetIsDefine = Object.prototype.hasOwnProperty.call(event, "user");
        if (tweetIsDefine) {
            res.write(JSON.stringify({ text: chunck.text, username: chunck.user.name }, null, 2) + "\n");
        }
    });
    searchBroker.on("error", err => process.stdout.write("" + err));
};
exports.getTweet = getTweet;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHdpdHRlckFwaS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvZW5kcG9pbnRzL3R3aXR0ZXJBcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBR0EsbUNBQW9DO0FBS3BDLE1BQU0sTUFBTSxHQUFZLElBQUksT0FBTyxDQUFDO0lBQ2xDLGdCQUFnQixFQUFFLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUU7SUFDNUMsbUJBQW1CLEVBQUUsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRTtJQUNsRCxZQUFZLEVBQUUsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRTtJQUMzQyxlQUFlLEVBQUUsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRTtDQUNsRCxDQUFDLENBQUM7QUFJSCxNQUFNLElBQUksR0FBVyxpQkFBaUIsQ0FBQztBQUd2QyxNQUFNLE1BQU0sR0FBZ0QsQ0FBQyxNQUU1RCxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztBQWlDbEMsTUFBTSxrQkFBa0IsR0FBUSxDQUFDLElBQVMsRUFBRSxFQUFFO0lBQzVDLE1BQU0sT0FBTyxHQUFXLE9BQU8sSUFBSSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFFN0QsT0FBTyxPQUFPLENBQUM7QUFDakIsQ0FBQyxDQUFDO0FBRUYsTUFBTSxRQUFRLEdBQUcsQ0FBQyxHQUFRLEVBQUUsR0FBUSxFQUFFLEVBQUU7SUFDdEMsTUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUV6RCxZQUFZLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQTJCLEVBQUUsRUFBRTtRQUN0RCxNQUFNLE1BQU0sR0FBUSxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM5QyxNQUFNLGFBQWEsR0FBWSxNQUFNLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQ2pFLEtBQUssRUFDTCxNQUFNLENBQ1AsQ0FBQztRQUNGLElBQUksYUFBYSxFQUFFO1lBQ2pCLEdBQUcsQ0FBQyxLQUFLLENBQ1AsSUFBSSxDQUFDLFNBQVMsQ0FDWixFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxFQUNqRCxJQUFJLEVBQ0osQ0FBQyxDQUNGLEdBQUcsSUFBSSxDQUNULENBQUM7U0FFSDtJQUVILENBQUMsQ0FBQyxDQUFDO0lBRUgsWUFBWSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUNsRSxDQUFDLENBQUM7QUFFTyw0QkFBUSIsInNvdXJjZXNDb250ZW50IjpbIi8vIGltcG9ydCB7IHN0cmVhbSwgVHdpdHRlciB9IGZyb20gXCIuL3R3aXR0ZXJcIjtcbmltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gXCJzdHJlYW1cIjtcbi8vIGltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcbmltcG9ydCBUd2l0dGVyID0gcmVxdWlyZShcInR3aXR0ZXJcIik7XG4vLyBpbXBvcnQgZXhwcmVzcyA9IHJlcXVpcmUoXCJleHByZXNzXCIpO1xuLy8gY29uc3Qgcm91dGVyOiBleHByZXNzLlJvdXRlciA9IGV4cHJlc3MuUm91dGVyKCk7XG4vLyBjb25zdCBqc29uMmNzdiA9IHJlcXVpcmUoJ2pzb24yY3N2Jyk7XG5cbmNvbnN0IGNsaWVudDogVHdpdHRlciA9IG5ldyBUd2l0dGVyKHtcbiAgYWNjZXNzX3Rva2VuX2tleTogYCR7cHJvY2Vzcy5lbnYuVE9LRU5fS0VZfWAsXG4gIGFjY2Vzc190b2tlbl9zZWNyZXQ6IGAke3Byb2Nlc3MuZW52LlRPS0VOX1NFQ1JFVH1gLFxuICBjb25zdW1lcl9rZXk6IGAke3Byb2Nlc3MuZW52LkNPTlNVTUVSX0tFWX1gLFxuICBjb25zdW1lcl9zZWNyZXQ6IGAke3Byb2Nlc3MuZW52LkNPTlNVTUVSX1NFQ1JFVH1gXG59KTtcblxuLy8gVHdlZXRlciBBcmdzXG4vLyBjb25zdCBwYXJhbXM6IG9iamVjdCA9IHsgdHJhY2s6IFwiYWtvblwiIH07XG5jb25zdCBwYXRoOiBzdHJpbmcgPSBcInN0YXR1c2VzL2ZpbHRlclwiO1xuXG4vLyBEZWZpbmUgU3RyZWFtXG5jb25zdCBzdHJlYW06IChwYXJhbXM6IHsgdHJhY2s6IHN0cmluZyB9KSA9PiBFdmVudEVtaXR0ZXIgPSAocGFyYW1zOiB7XG4gIHRyYWNrOiBzdHJpbmc7XG59KSA9PiBjbGllbnQuc3RyZWFtKHBhdGgsIHBhcmFtcyk7XG5cbi8vIFByb2NjZXNzIHN0cmVhbSBvbiBlcnJvclxuLypjb25zdCBvbkVycm9yOiBhbnkgPSAoZXJyb3I6IGFueSkgPT4ge1xuICB0aHJvdyBuZXcgRXJyb3IoZXJyb3IpO1xufTtcbnN0cmVhbS5vbihcImVycm9yXCIsIG9uRXJyb3IpOyovXG5cbi8qXG5leHBvcnQgeyBzdHJlYW0sIFR3aXR0ZXIgfTtcblxuY29uc3QgcGFyc2VDaHVua1RvT2JqZWN0OiBhbnkgPSAoZGF0YTogYW55KSA9PiB7XG4gIGNvbnN0IGVsZW1lbnQ6IG9iamVjdCA9IHR5cGVvZiBkYXRhID09PSBcIm9iamVjdFwiID8gZGF0YSA6IHt9O1xuXG4gIHJldHVybiBlbGVtZW50O1xufTtcbi8vIFByb2Nlc3Mgc3RyZWFtIG9uIHN1Y2Nlc3Ncblxuc3RyZWFtLm9uKCdkYXRhJywgKGV2ZW50OiBUd2l0dGVyLlJlc3BvbnNlRGF0YSkgPT4ge1xuICAvLyBHZXQgZm9yIGVhY2ggY2h1bmNrIGEgZGF0YSBvYmplY3QgLS0+IHJlc29sdmUgY2h1bmNrID09ICd1bmRlZmluZWQnXG4gIGNvbnN0IGNodW5jazogYW55ID0gcGFyc2VDaHVua1RvT2JqZWN0KGV2ZW50KTtcbiAgY29uc3QgdHdlZXRJc0RlZmluZTogYm9vbGVhbiA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChldmVudCxcInVzZXJcIik7XG4gIGlmICh0d2VldElzRGVmaW5lKSB7XG4gICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoY2h1bmNrLCBudWxsLCAyKSlcbiAgICByZXMud3JpdGUoe1xuICAgICAgdGV4dDogY2h1bmNrLnRleHQsXG4gICAgICB1c2VybmFtZTogY2h1bmNrLnVzZXIubmFtZVxuICAgIH0pXG4gICAgLy8gSGVyZSBpIGNhbiB3b3JrIG9uIG15IG9iamVjdFxuICAgIHJlcy5lbmQoKVxuICB9XG59KSovXG5cbmNvbnN0IHBhcnNlQ2h1bmtUb09iamVjdDogYW55ID0gKGRhdGE6IGFueSkgPT4ge1xuICBjb25zdCBlbGVtZW50OiBvYmplY3QgPSB0eXBlb2YgZGF0YSA9PT0gXCJvYmplY3RcIiA/IGRhdGEgOiB7fTtcblxuICByZXR1cm4gZWxlbWVudDtcbn07XG5cbmNvbnN0IGdldFR3ZWV0ID0gKHJlcTogYW55LCByZXM6IGFueSkgPT4ge1xuICBjb25zdCBzZWFyY2hCcm9rZXIgPSBzdHJlYW0oeyB0cmFjazogcmVxLnF1ZXJ5LnNlYXJjaCB9KTtcbiAgLy8gbGV0IGkgPSAwO1xuICBzZWFyY2hCcm9rZXIub24oXCJkYXRhXCIsIChldmVudDogVHdpdHRlci5SZXNwb25zZURhdGEpID0+IHtcbiAgICBjb25zdCBjaHVuY2s6IGFueSA9IHBhcnNlQ2h1bmtUb09iamVjdChldmVudCk7XG4gICAgY29uc3QgdHdlZXRJc0RlZmluZTogYm9vbGVhbiA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChcbiAgICAgIGV2ZW50LFxuICAgICAgXCJ1c2VyXCJcbiAgICApO1xuICAgIGlmICh0d2VldElzRGVmaW5lKSB7XG4gICAgICByZXMud3JpdGUoXG4gICAgICAgIEpTT04uc3RyaW5naWZ5KFxuICAgICAgICAgIHsgdGV4dDogY2h1bmNrLnRleHQsIHVzZXJuYW1lOiBjaHVuY2sudXNlci5uYW1lIH0sXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICAyXG4gICAgICAgICkgKyBcIlxcblwiXG4gICAgICApO1xuICAgICAgLy8gaSsrXG4gICAgfVxuICAgIC8vaWYgKGk+MykgcmVzLmVuZCgpXG4gIH0pO1xuXG4gIHNlYXJjaEJyb2tlci5vbihcImVycm9yXCIsIGVyciA9PiBwcm9jZXNzLnN0ZG91dC53cml0ZShcIlwiICsgZXJyKSk7XG59O1xuXG5leHBvcnQgeyBnZXRUd2VldCB9O1xuIl19